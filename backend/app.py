import os
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
import jwt
from functools import wraps
from reportlab.pdfgen import canvas

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv(
    'DATABASE_URL', 'mysql+pymysql://user:password@db/ajuda')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'changeme')

bcrypt = Bcrypt(app)
db = SQLAlchemy(app)

# Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(128), nullable=False)
    role = db.Column(db.String(20), nullable=False)

class Item(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    name = db.Column(db.String(120), nullable=False)
    description = db.Column(db.Text)
    quantity = db.Column(db.Integer, default=1)
    status = db.Column(db.String(20), default='Disponivel')

class Request(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    description = db.Column(db.Text)
    category = db.Column(db.String(50))
    status = db.Column(db.String(20), default='Pendente')
    item_id = db.Column(db.Integer, db.ForeignKey('item.id'))

# Helpers
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None
        if 'Authorization' in request.headers:
            token = request.headers['Authorization'].split(" ")[1]
        if not token:
            return jsonify({'message': 'Token is missing'}), 401
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
            current_user = User.query.get(data['user_id'])
        except Exception:
            return jsonify({'message': 'Token is invalid'}), 401
        return f(current_user, *args, **kwargs)
    return decorated

# Routes
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    hashed_pw = bcrypt.generate_password_hash(data['password']).decode('utf-8')
    user = User(name=data['name'], email=data['email'], password=hashed_pw, role=data.get('role', 'doador'))
    db.session.add(user)
    db.session.commit()
    return jsonify({'message': 'User created'}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    user = User.query.filter_by(email=data['email']).first()
    if user and bcrypt.check_password_hash(user.password, data['password']):
        token = jwt.encode({'user_id': user.id, 'exp': datetime.utcnow() + timedelta(hours=2)}, app.config['SECRET_KEY'])
        return jsonify({'token': token})
    return jsonify({'message': 'Invalid credentials'}), 401

@app.route('/items', methods=['POST'])
@token_required
def create_item(current_user):
    if current_user.role != 'doador':
        return jsonify({'message': 'Only donors can create items'}), 403
    data = request.json
    item = Item(user_id=current_user.id, name=data['name'], description=data.get('description'), quantity=data.get('quantity',1))
    db.session.add(item)
    db.session.commit()
    return jsonify({'message': 'Item created', 'id': item.id}), 201

@app.route('/items', methods=['GET'])
def list_items():
    items = Item.query.filter_by(status='Disponivel').all()
    return jsonify([{'id': i.id, 'name': i.name, 'description': i.description, 'quantity': i.quantity} for i in items])

@app.route('/requests', methods=['POST'])
@token_required
def create_request(current_user):
    if current_user.role != 'beneficiario':
        return jsonify({'message': 'Only beneficiaries can create requests'}), 403
    data = request.json
    req = Request(user_id=current_user.id, description=data['description'], category=data.get('category'))
    db.session.add(req)
    db.session.commit()
    return jsonify({'message': 'Request created', 'id': req.id}), 201

@app.route('/reports/donations')
@token_required
def report_donations(current_user):
    if current_user.role not in ('admin', 'organizacao'):
        return jsonify({'message': 'Unauthorized'}), 403
    start = request.args.get('start')
    end = request.args.get('end')
    query = Item.query
    if start:
        query = query.filter(Item.id >= 0)  # placeholder
    items = query.all()
    file_path = '/tmp/report.pdf'
    c = canvas.Canvas(file_path)
    c.drawString(100, 800, f'Report generated by {current_user.name}')
    c.drawString(100, 780, f'Total items: {len(items)}')
    c.save()
    with open(file_path, 'rb') as f:
        pdf = f.read()
    return (pdf, 200, {'Content-Type': 'application/pdf'})

if __name__ == '__main__':
    db.create_all()
    app.run(host='0.0.0.0', port=5000)
